package com.fpp.status.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fpp.status.entity.StringConverter;
import java.util.List;

import com.fpp.status.entity.CardBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CARD_BEAN".
*/
public class CardBeanDao extends AbstractDao<CardBean, Long> {

    public static final String TABLENAME = "CARD_BEAN";

    /**
     * Properties of entity CardBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Tid = new Property(1, Long.class, "tid", false, "TID");
        public final static Property Atr = new Property(2, String.class, "atr", false, "ATR");
        public final static Property Atrr = new Property(3, String.class, "atrr", false, "ATRR");
        public final static Property Artt = new Property(4, String.class, "artt", false, "ARTT");
        public final static Property ABoolean = new Property(5, String.class, "aBoolean", false, "A_BOOLEAN");
        public final static Property AnInt = new Property(6, String.class, "anInt", false, "AN_INT");
        public final static Property ALong = new Property(7, String.class, "aLong", false, "A_LONG");
        public final static Property Type = new Property(8, int.class, "type", false, "TYPE");
        public final static Property Title = new Property(9, String.class, "title", false, "TITLE");
        public final static Property Ans_type = new Property(10, String.class, "ans_type", false, "ANS_TYPE");
        public final static Property Analysis = new Property(11, String.class, "analysis", false, "ANALYSIS");
        public final static Property Images = new Property(12, String.class, "images", false, "IMAGES");
        public final static Property Image_name = new Property(13, String.class, "image_name", false, "IMAGE_NAME");
        public final static Property Image_byte = new Property(14, byte[].class, "image_byte", false, "IMAGE_BYTE");
        public final static Property Answer = new Property(15, String.class, "answer", false, "ANSWER");
        public final static Property Option = new Property(16, String.class, "option", false, "OPTION");
        public final static Property Finish_exercise = new Property(17, boolean.class, "finish_exercise", false, "FINISH_EXERCISE");
        public final static Property Select_answer = new Property(18, String.class, "select_answer", false, "SELECT_ANSWER");
    }

    private final StringConverter answerConverter = new StringConverter();
    private final StringConverter optionConverter = new StringConverter();
    private final StringConverter select_answerConverter = new StringConverter();

    public CardBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CardBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CARD_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TID\" INTEGER," + // 1: tid
                "\"ATR\" TEXT," + // 2: atr
                "\"ATRR\" TEXT," + // 3: atrr
                "\"ARTT\" TEXT," + // 4: artt
                "\"A_BOOLEAN\" TEXT," + // 5: aBoolean
                "\"AN_INT\" TEXT," + // 6: anInt
                "\"A_LONG\" TEXT," + // 7: aLong
                "\"TYPE\" INTEGER NOT NULL ," + // 8: type
                "\"TITLE\" TEXT," + // 9: title
                "\"ANS_TYPE\" TEXT," + // 10: ans_type
                "\"ANALYSIS\" TEXT," + // 11: analysis
                "\"IMAGES\" TEXT," + // 12: images
                "\"IMAGE_NAME\" TEXT," + // 13: image_name
                "\"IMAGE_BYTE\" BLOB," + // 14: image_byte
                "\"ANSWER\" TEXT," + // 15: answer
                "\"OPTION\" TEXT," + // 16: option
                "\"FINISH_EXERCISE\" INTEGER NOT NULL ," + // 17: finish_exercise
                "\"SELECT_ANSWER\" TEXT);"); // 18: select_answer
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CARD_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CardBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long tid = entity.getTid();
        if (tid != null) {
            stmt.bindLong(2, tid);
        }
 
        String atr = entity.getAtr();
        if (atr != null) {
            stmt.bindString(3, atr);
        }
 
        String atrr = entity.getAtrr();
        if (atrr != null) {
            stmt.bindString(4, atrr);
        }
 
        String artt = entity.getArtt();
        if (artt != null) {
            stmt.bindString(5, artt);
        }
 
        String aBoolean = entity.getABoolean();
        if (aBoolean != null) {
            stmt.bindString(6, aBoolean);
        }
 
        String anInt = entity.getAnInt();
        if (anInt != null) {
            stmt.bindString(7, anInt);
        }
 
        String aLong = entity.getALong();
        if (aLong != null) {
            stmt.bindString(8, aLong);
        }
        stmt.bindLong(9, entity.getType());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(10, title);
        }
 
        String ans_type = entity.getAns_type();
        if (ans_type != null) {
            stmt.bindString(11, ans_type);
        }
 
        String analysis = entity.getAnalysis();
        if (analysis != null) {
            stmt.bindString(12, analysis);
        }
 
        String images = entity.getImages();
        if (images != null) {
            stmt.bindString(13, images);
        }
 
        String image_name = entity.getImage_name();
        if (image_name != null) {
            stmt.bindString(14, image_name);
        }
 
        byte[] image_byte = entity.getImage_byte();
        if (image_byte != null) {
            stmt.bindBlob(15, image_byte);
        }
 
        List answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(16, answerConverter.convertToDatabaseValue(answer));
        }
 
        List option = entity.getOption();
        if (option != null) {
            stmt.bindString(17, optionConverter.convertToDatabaseValue(option));
        }
        stmt.bindLong(18, entity.getFinish_exercise() ? 1L: 0L);
 
        List select_answer = entity.getSelect_answer();
        if (select_answer != null) {
            stmt.bindString(19, select_answerConverter.convertToDatabaseValue(select_answer));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CardBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long tid = entity.getTid();
        if (tid != null) {
            stmt.bindLong(2, tid);
        }
 
        String atr = entity.getAtr();
        if (atr != null) {
            stmt.bindString(3, atr);
        }
 
        String atrr = entity.getAtrr();
        if (atrr != null) {
            stmt.bindString(4, atrr);
        }
 
        String artt = entity.getArtt();
        if (artt != null) {
            stmt.bindString(5, artt);
        }
 
        String aBoolean = entity.getABoolean();
        if (aBoolean != null) {
            stmt.bindString(6, aBoolean);
        }
 
        String anInt = entity.getAnInt();
        if (anInt != null) {
            stmt.bindString(7, anInt);
        }
 
        String aLong = entity.getALong();
        if (aLong != null) {
            stmt.bindString(8, aLong);
        }
        stmt.bindLong(9, entity.getType());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(10, title);
        }
 
        String ans_type = entity.getAns_type();
        if (ans_type != null) {
            stmt.bindString(11, ans_type);
        }
 
        String analysis = entity.getAnalysis();
        if (analysis != null) {
            stmt.bindString(12, analysis);
        }
 
        String images = entity.getImages();
        if (images != null) {
            stmt.bindString(13, images);
        }
 
        String image_name = entity.getImage_name();
        if (image_name != null) {
            stmt.bindString(14, image_name);
        }
 
        byte[] image_byte = entity.getImage_byte();
        if (image_byte != null) {
            stmt.bindBlob(15, image_byte);
        }
 
        List answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(16, answerConverter.convertToDatabaseValue(answer));
        }
 
        List option = entity.getOption();
        if (option != null) {
            stmt.bindString(17, optionConverter.convertToDatabaseValue(option));
        }
        stmt.bindLong(18, entity.getFinish_exercise() ? 1L: 0L);
 
        List select_answer = entity.getSelect_answer();
        if (select_answer != null) {
            stmt.bindString(19, select_answerConverter.convertToDatabaseValue(select_answer));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CardBean readEntity(Cursor cursor, int offset) {
        CardBean entity = new CardBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // tid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // atr
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // atrr
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // artt
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // aBoolean
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // anInt
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // aLong
            cursor.getInt(offset + 8), // type
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // title
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ans_type
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // analysis
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // images
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // image_name
            cursor.isNull(offset + 14) ? null : cursor.getBlob(offset + 14), // image_byte
            cursor.isNull(offset + 15) ? null : answerConverter.convertToEntityProperty(cursor.getString(offset + 15)), // answer
            cursor.isNull(offset + 16) ? null : optionConverter.convertToEntityProperty(cursor.getString(offset + 16)), // option
            cursor.getShort(offset + 17) != 0, // finish_exercise
            cursor.isNull(offset + 18) ? null : select_answerConverter.convertToEntityProperty(cursor.getString(offset + 18)) // select_answer
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CardBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setAtr(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAtrr(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setArtt(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setABoolean(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAnInt(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setALong(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setType(cursor.getInt(offset + 8));
        entity.setTitle(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAns_type(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAnalysis(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setImages(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setImage_name(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setImage_byte(cursor.isNull(offset + 14) ? null : cursor.getBlob(offset + 14));
        entity.setAnswer(cursor.isNull(offset + 15) ? null : answerConverter.convertToEntityProperty(cursor.getString(offset + 15)));
        entity.setOption(cursor.isNull(offset + 16) ? null : optionConverter.convertToEntityProperty(cursor.getString(offset + 16)));
        entity.setFinish_exercise(cursor.getShort(offset + 17) != 0);
        entity.setSelect_answer(cursor.isNull(offset + 18) ? null : select_answerConverter.convertToEntityProperty(cursor.getString(offset + 18)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CardBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CardBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CardBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
