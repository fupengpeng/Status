package com.fpp.status.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fpp.status.view.download.data.DownloadData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOWNLOAD_DATA".
*/
public class DownloadDataDao extends AbstractDao<DownloadData, Long> {

    public static final String TABLENAME = "DOWNLOAD_DATA";

    /**
     * Properties of entity DownloadData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PostId = new Property(1, Long.class, "postId", false, "POST_ID");
        public final static Property ShowName = new Property(2, String.class, "showName", false, "SHOW_NAME");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property ImgUrl = new Property(4, String.class, "imgUrl", false, "IMG_URL");
        public final static Property Status = new Property(5, int.class, "status", false, "STATUS");
        public final static Property TotalLength = new Property(6, int.class, "totalLength", false, "TOTAL_LENGTH");
        public final static Property CurrentLength = new Property(7, int.class, "currentLength", false, "CURRENT_LENGTH");
        public final static Property Url = new Property(8, String.class, "url", false, "URL");
        public final static Property Path = new Property(9, String.class, "path", false, "PATH");
        public final static Property Select = new Property(10, Boolean.class, "select", false, "SELECT");
        public final static Property TaskId = new Property(11, int.class, "taskId", false, "TASK_ID");
        public final static Property Percentage = new Property(12, float.class, "percentage", false, "PERCENTAGE");
        public final static Property ChildTaskCount = new Property(13, int.class, "childTaskCount", false, "CHILD_TASK_COUNT");
        public final static Property Date = new Property(14, long.class, "date", false, "DATE");
        public final static Property LastModify = new Property(15, String.class, "lastModify", false, "LAST_MODIFY");
    }


    public DownloadDataDao(DaoConfig config) {
        super(config);
    }
    
    public DownloadDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWNLOAD_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"POST_ID\" INTEGER," + // 1: postId
                "\"SHOW_NAME\" TEXT," + // 2: showName
                "\"NAME\" TEXT," + // 3: name
                "\"IMG_URL\" TEXT," + // 4: imgUrl
                "\"STATUS\" INTEGER NOT NULL ," + // 5: status
                "\"TOTAL_LENGTH\" INTEGER NOT NULL ," + // 6: totalLength
                "\"CURRENT_LENGTH\" INTEGER NOT NULL ," + // 7: currentLength
                "\"URL\" TEXT," + // 8: url
                "\"PATH\" TEXT," + // 9: path
                "\"SELECT\" INTEGER," + // 10: select
                "\"TASK_ID\" INTEGER NOT NULL ," + // 11: taskId
                "\"PERCENTAGE\" REAL NOT NULL ," + // 12: percentage
                "\"CHILD_TASK_COUNT\" INTEGER NOT NULL ," + // 13: childTaskCount
                "\"DATE\" INTEGER NOT NULL ," + // 14: date
                "\"LAST_MODIFY\" TEXT);"); // 15: lastModify
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWNLOAD_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownloadData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long postId = entity.getPostId();
        if (postId != null) {
            stmt.bindLong(2, postId);
        }
 
        String showName = entity.getShowName();
        if (showName != null) {
            stmt.bindString(3, showName);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(5, imgUrl);
        }
        stmt.bindLong(6, entity.getStatus());
        stmt.bindLong(7, entity.getTotalLength());
        stmt.bindLong(8, entity.getCurrentLength());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(9, url);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(10, path);
        }
 
        Boolean select = entity.getSelect();
        if (select != null) {
            stmt.bindLong(11, select ? 1L: 0L);
        }
        stmt.bindLong(12, entity.getTaskId());
        stmt.bindDouble(13, entity.getPercentage());
        stmt.bindLong(14, entity.getChildTaskCount());
        stmt.bindLong(15, entity.getDate());
 
        String lastModify = entity.getLastModify();
        if (lastModify != null) {
            stmt.bindString(16, lastModify);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownloadData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long postId = entity.getPostId();
        if (postId != null) {
            stmt.bindLong(2, postId);
        }
 
        String showName = entity.getShowName();
        if (showName != null) {
            stmt.bindString(3, showName);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(5, imgUrl);
        }
        stmt.bindLong(6, entity.getStatus());
        stmt.bindLong(7, entity.getTotalLength());
        stmt.bindLong(8, entity.getCurrentLength());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(9, url);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(10, path);
        }
 
        Boolean select = entity.getSelect();
        if (select != null) {
            stmt.bindLong(11, select ? 1L: 0L);
        }
        stmt.bindLong(12, entity.getTaskId());
        stmt.bindDouble(13, entity.getPercentage());
        stmt.bindLong(14, entity.getChildTaskCount());
        stmt.bindLong(15, entity.getDate());
 
        String lastModify = entity.getLastModify();
        if (lastModify != null) {
            stmt.bindString(16, lastModify);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DownloadData readEntity(Cursor cursor, int offset) {
        DownloadData entity = new DownloadData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // postId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // showName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // imgUrl
            cursor.getInt(offset + 5), // status
            cursor.getInt(offset + 6), // totalLength
            cursor.getInt(offset + 7), // currentLength
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // url
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // path
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // select
            cursor.getInt(offset + 11), // taskId
            cursor.getFloat(offset + 12), // percentage
            cursor.getInt(offset + 13), // childTaskCount
            cursor.getLong(offset + 14), // date
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // lastModify
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownloadData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPostId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setShowName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImgUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStatus(cursor.getInt(offset + 5));
        entity.setTotalLength(cursor.getInt(offset + 6));
        entity.setCurrentLength(cursor.getInt(offset + 7));
        entity.setUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPath(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSelect(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setTaskId(cursor.getInt(offset + 11));
        entity.setPercentage(cursor.getFloat(offset + 12));
        entity.setChildTaskCount(cursor.getInt(offset + 13));
        entity.setDate(cursor.getLong(offset + 14));
        entity.setLastModify(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DownloadData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DownloadData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DownloadData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
