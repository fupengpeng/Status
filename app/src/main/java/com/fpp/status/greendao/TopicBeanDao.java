package com.fpp.status.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fpp.status.entity.StringConverter;
import java.util.List;

import com.fpp.status.entity.TopicBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TOPIC_BEAN".
*/
public class TopicBeanDao extends AbstractDao<TopicBean, Long> {

    public static final String TABLENAME = "TOPIC_BEAN";

    /**
     * Properties of entity TopicBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Tid = new Property(1, Long.class, "tid", false, "TID");
        public final static Property Type = new Property(2, int.class, "type", false, "TYPE");
        public final static Property Subject = new Property(3, int.class, "subject", false, "SUBJECT");
        public final static Property Chapter = new Property(4, int.class, "chapter", false, "CHAPTER");
        public final static Property Title = new Property(5, String.class, "title", false, "TITLE");
        public final static Property Ans_type = new Property(6, String.class, "ans_type", false, "ANS_TYPE");
        public final static Property Analysis = new Property(7, String.class, "analysis", false, "ANALYSIS");
        public final static Property Images = new Property(8, String.class, "images", false, "IMAGES");
        public final static Property Image_name = new Property(9, String.class, "image_name", false, "IMAGE_NAME");
        public final static Property Image_byte = new Property(10, byte[].class, "image_byte", false, "IMAGE_BYTE");
        public final static Property Answer = new Property(11, String.class, "answer", false, "ANSWER");
        public final static Property Option = new Property(12, String.class, "option", false, "OPTION");
        public final static Property Collect = new Property(13, boolean.class, "collect", false, "COLLECT");
        public final static Property Wrong_collect = new Property(14, boolean.class, "wrong_collect", false, "WRONG_COLLECT");
        public final static Property Finish_exercise = new Property(15, boolean.class, "finish_exercise", false, "FINISH_EXERCISE");
        public final static Property Select_answer = new Property(16, String.class, "select_answer", false, "SELECT_ANSWER");
        public final static Property Finish_exercise_random = new Property(17, boolean.class, "finish_exercise_random", false, "FINISH_EXERCISE_RANDOM");
        public final static Property Select_answer_random = new Property(18, String.class, "select_answer_random", false, "SELECT_ANSWER_RANDOM");
        public final static Property Finish_exercise_section = new Property(19, boolean.class, "finish_exercise_section", false, "FINISH_EXERCISE_SECTION");
        public final static Property Select_answer_section = new Property(20, String.class, "select_answer_section", false, "SELECT_ANSWER_SECTION");
        public final static Property Finish_exercise_drill = new Property(21, boolean.class, "finish_exercise_drill", false, "FINISH_EXERCISE_DRILL");
        public final static Property Select_answer_drill = new Property(22, String.class, "select_answer_drill", false, "SELECT_ANSWER_DRILL");
        public final static Property Finish_exercise_record = new Property(23, boolean.class, "finish_exercise_record", false, "FINISH_EXERCISE_RECORD");
        public final static Property Select_answer_record = new Property(24, String.class, "select_answer_record", false, "SELECT_ANSWER_RECORD");
    }

    private final StringConverter answerConverter = new StringConverter();
    private final StringConverter optionConverter = new StringConverter();
    private final StringConverter select_answerConverter = new StringConverter();
    private final StringConverter select_answer_randomConverter = new StringConverter();
    private final StringConverter select_answer_sectionConverter = new StringConverter();
    private final StringConverter select_answer_drillConverter = new StringConverter();
    private final StringConverter select_answer_recordConverter = new StringConverter();

    public TopicBeanDao(DaoConfig config) {
        super(config);
    }
    
    public TopicBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TOPIC_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TID\" INTEGER," + // 1: tid
                "\"TYPE\" INTEGER NOT NULL ," + // 2: type
                "\"SUBJECT\" INTEGER NOT NULL ," + // 3: subject
                "\"CHAPTER\" INTEGER NOT NULL ," + // 4: chapter
                "\"TITLE\" TEXT," + // 5: title
                "\"ANS_TYPE\" TEXT," + // 6: ans_type
                "\"ANALYSIS\" TEXT," + // 7: analysis
                "\"IMAGES\" TEXT," + // 8: images
                "\"IMAGE_NAME\" TEXT," + // 9: image_name
                "\"IMAGE_BYTE\" BLOB," + // 10: image_byte
                "\"ANSWER\" TEXT," + // 11: answer
                "\"OPTION\" TEXT," + // 12: option
                "\"COLLECT\" INTEGER NOT NULL ," + // 13: collect
                "\"WRONG_COLLECT\" INTEGER NOT NULL ," + // 14: wrong_collect
                "\"FINISH_EXERCISE\" INTEGER NOT NULL ," + // 15: finish_exercise
                "\"SELECT_ANSWER\" TEXT," + // 16: select_answer
                "\"FINISH_EXERCISE_RANDOM\" INTEGER NOT NULL ," + // 17: finish_exercise_random
                "\"SELECT_ANSWER_RANDOM\" TEXT," + // 18: select_answer_random
                "\"FINISH_EXERCISE_SECTION\" INTEGER NOT NULL ," + // 19: finish_exercise_section
                "\"SELECT_ANSWER_SECTION\" TEXT," + // 20: select_answer_section
                "\"FINISH_EXERCISE_DRILL\" INTEGER NOT NULL ," + // 21: finish_exercise_drill
                "\"SELECT_ANSWER_DRILL\" TEXT," + // 22: select_answer_drill
                "\"FINISH_EXERCISE_RECORD\" INTEGER NOT NULL ," + // 23: finish_exercise_record
                "\"SELECT_ANSWER_RECORD\" TEXT);"); // 24: select_answer_record
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TOPIC_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TopicBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long tid = entity.getTid();
        if (tid != null) {
            stmt.bindLong(2, tid);
        }
        stmt.bindLong(3, entity.getType());
        stmt.bindLong(4, entity.getSubject());
        stmt.bindLong(5, entity.getChapter());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
 
        String ans_type = entity.getAns_type();
        if (ans_type != null) {
            stmt.bindString(7, ans_type);
        }
 
        String analysis = entity.getAnalysis();
        if (analysis != null) {
            stmt.bindString(8, analysis);
        }
 
        String images = entity.getImages();
        if (images != null) {
            stmt.bindString(9, images);
        }
 
        String image_name = entity.getImage_name();
        if (image_name != null) {
            stmt.bindString(10, image_name);
        }
 
        byte[] image_byte = entity.getImage_byte();
        if (image_byte != null) {
            stmt.bindBlob(11, image_byte);
        }
 
        List answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(12, answerConverter.convertToDatabaseValue(answer));
        }
 
        List option = entity.getOption();
        if (option != null) {
            stmt.bindString(13, optionConverter.convertToDatabaseValue(option));
        }
        stmt.bindLong(14, entity.getCollect() ? 1L: 0L);
        stmt.bindLong(15, entity.getWrong_collect() ? 1L: 0L);
        stmt.bindLong(16, entity.getFinish_exercise() ? 1L: 0L);
 
        List select_answer = entity.getSelect_answer();
        if (select_answer != null) {
            stmt.bindString(17, select_answerConverter.convertToDatabaseValue(select_answer));
        }
        stmt.bindLong(18, entity.getFinish_exercise_random() ? 1L: 0L);
 
        List select_answer_random = entity.getSelect_answer_random();
        if (select_answer_random != null) {
            stmt.bindString(19, select_answer_randomConverter.convertToDatabaseValue(select_answer_random));
        }
        stmt.bindLong(20, entity.getFinish_exercise_section() ? 1L: 0L);
 
        List select_answer_section = entity.getSelect_answer_section();
        if (select_answer_section != null) {
            stmt.bindString(21, select_answer_sectionConverter.convertToDatabaseValue(select_answer_section));
        }
        stmt.bindLong(22, entity.getFinish_exercise_drill() ? 1L: 0L);
 
        List select_answer_drill = entity.getSelect_answer_drill();
        if (select_answer_drill != null) {
            stmt.bindString(23, select_answer_drillConverter.convertToDatabaseValue(select_answer_drill));
        }
        stmt.bindLong(24, entity.getFinish_exercise_record() ? 1L: 0L);
 
        List select_answer_record = entity.getSelect_answer_record();
        if (select_answer_record != null) {
            stmt.bindString(25, select_answer_recordConverter.convertToDatabaseValue(select_answer_record));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TopicBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long tid = entity.getTid();
        if (tid != null) {
            stmt.bindLong(2, tid);
        }
        stmt.bindLong(3, entity.getType());
        stmt.bindLong(4, entity.getSubject());
        stmt.bindLong(5, entity.getChapter());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
 
        String ans_type = entity.getAns_type();
        if (ans_type != null) {
            stmt.bindString(7, ans_type);
        }
 
        String analysis = entity.getAnalysis();
        if (analysis != null) {
            stmt.bindString(8, analysis);
        }
 
        String images = entity.getImages();
        if (images != null) {
            stmt.bindString(9, images);
        }
 
        String image_name = entity.getImage_name();
        if (image_name != null) {
            stmt.bindString(10, image_name);
        }
 
        byte[] image_byte = entity.getImage_byte();
        if (image_byte != null) {
            stmt.bindBlob(11, image_byte);
        }
 
        List answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(12, answerConverter.convertToDatabaseValue(answer));
        }
 
        List option = entity.getOption();
        if (option != null) {
            stmt.bindString(13, optionConverter.convertToDatabaseValue(option));
        }
        stmt.bindLong(14, entity.getCollect() ? 1L: 0L);
        stmt.bindLong(15, entity.getWrong_collect() ? 1L: 0L);
        stmt.bindLong(16, entity.getFinish_exercise() ? 1L: 0L);
 
        List select_answer = entity.getSelect_answer();
        if (select_answer != null) {
            stmt.bindString(17, select_answerConverter.convertToDatabaseValue(select_answer));
        }
        stmt.bindLong(18, entity.getFinish_exercise_random() ? 1L: 0L);
 
        List select_answer_random = entity.getSelect_answer_random();
        if (select_answer_random != null) {
            stmt.bindString(19, select_answer_randomConverter.convertToDatabaseValue(select_answer_random));
        }
        stmt.bindLong(20, entity.getFinish_exercise_section() ? 1L: 0L);
 
        List select_answer_section = entity.getSelect_answer_section();
        if (select_answer_section != null) {
            stmt.bindString(21, select_answer_sectionConverter.convertToDatabaseValue(select_answer_section));
        }
        stmt.bindLong(22, entity.getFinish_exercise_drill() ? 1L: 0L);
 
        List select_answer_drill = entity.getSelect_answer_drill();
        if (select_answer_drill != null) {
            stmt.bindString(23, select_answer_drillConverter.convertToDatabaseValue(select_answer_drill));
        }
        stmt.bindLong(24, entity.getFinish_exercise_record() ? 1L: 0L);
 
        List select_answer_record = entity.getSelect_answer_record();
        if (select_answer_record != null) {
            stmt.bindString(25, select_answer_recordConverter.convertToDatabaseValue(select_answer_record));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TopicBean readEntity(Cursor cursor, int offset) {
        TopicBean entity = new TopicBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // tid
            cursor.getInt(offset + 2), // type
            cursor.getInt(offset + 3), // subject
            cursor.getInt(offset + 4), // chapter
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // title
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ans_type
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // analysis
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // images
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // image_name
            cursor.isNull(offset + 10) ? null : cursor.getBlob(offset + 10), // image_byte
            cursor.isNull(offset + 11) ? null : answerConverter.convertToEntityProperty(cursor.getString(offset + 11)), // answer
            cursor.isNull(offset + 12) ? null : optionConverter.convertToEntityProperty(cursor.getString(offset + 12)), // option
            cursor.getShort(offset + 13) != 0, // collect
            cursor.getShort(offset + 14) != 0, // wrong_collect
            cursor.getShort(offset + 15) != 0, // finish_exercise
            cursor.isNull(offset + 16) ? null : select_answerConverter.convertToEntityProperty(cursor.getString(offset + 16)), // select_answer
            cursor.getShort(offset + 17) != 0, // finish_exercise_random
            cursor.isNull(offset + 18) ? null : select_answer_randomConverter.convertToEntityProperty(cursor.getString(offset + 18)), // select_answer_random
            cursor.getShort(offset + 19) != 0, // finish_exercise_section
            cursor.isNull(offset + 20) ? null : select_answer_sectionConverter.convertToEntityProperty(cursor.getString(offset + 20)), // select_answer_section
            cursor.getShort(offset + 21) != 0, // finish_exercise_drill
            cursor.isNull(offset + 22) ? null : select_answer_drillConverter.convertToEntityProperty(cursor.getString(offset + 22)), // select_answer_drill
            cursor.getShort(offset + 23) != 0, // finish_exercise_record
            cursor.isNull(offset + 24) ? null : select_answer_recordConverter.convertToEntityProperty(cursor.getString(offset + 24)) // select_answer_record
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TopicBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setSubject(cursor.getInt(offset + 3));
        entity.setChapter(cursor.getInt(offset + 4));
        entity.setTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAns_type(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAnalysis(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setImages(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setImage_name(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setImage_byte(cursor.isNull(offset + 10) ? null : cursor.getBlob(offset + 10));
        entity.setAnswer(cursor.isNull(offset + 11) ? null : answerConverter.convertToEntityProperty(cursor.getString(offset + 11)));
        entity.setOption(cursor.isNull(offset + 12) ? null : optionConverter.convertToEntityProperty(cursor.getString(offset + 12)));
        entity.setCollect(cursor.getShort(offset + 13) != 0);
        entity.setWrong_collect(cursor.getShort(offset + 14) != 0);
        entity.setFinish_exercise(cursor.getShort(offset + 15) != 0);
        entity.setSelect_answer(cursor.isNull(offset + 16) ? null : select_answerConverter.convertToEntityProperty(cursor.getString(offset + 16)));
        entity.setFinish_exercise_random(cursor.getShort(offset + 17) != 0);
        entity.setSelect_answer_random(cursor.isNull(offset + 18) ? null : select_answer_randomConverter.convertToEntityProperty(cursor.getString(offset + 18)));
        entity.setFinish_exercise_section(cursor.getShort(offset + 19) != 0);
        entity.setSelect_answer_section(cursor.isNull(offset + 20) ? null : select_answer_sectionConverter.convertToEntityProperty(cursor.getString(offset + 20)));
        entity.setFinish_exercise_drill(cursor.getShort(offset + 21) != 0);
        entity.setSelect_answer_drill(cursor.isNull(offset + 22) ? null : select_answer_drillConverter.convertToEntityProperty(cursor.getString(offset + 22)));
        entity.setFinish_exercise_record(cursor.getShort(offset + 23) != 0);
        entity.setSelect_answer_record(cursor.isNull(offset + 24) ? null : select_answer_recordConverter.convertToEntityProperty(cursor.getString(offset + 24)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TopicBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TopicBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TopicBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
